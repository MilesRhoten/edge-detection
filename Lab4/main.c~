#include <opencv2/opencv.h>
#include <opencv2/highgui/highgui_c.h>
#include <stdio.h>


void to442_grayscale(IplImage* origImage, IplImage* grayImage) {
  int y;
  for (y = 0; y < origImage -> height; y++) {
    int x;
    for (x = 0; x < origImage -> width; x++ ) {
      CvScalar pixel = cvGet2D(origImage, y, x);

      double grayVal = (.2126 * pixel.val[2]) + (.7152 * pixel.val[1]) + (.0722 * pixel.val[0]);

      CvScalar grayPixel = cvScalar(grayVal);
      cvSet2D(grayImage, y, x, grayPixel);
    }
  }
}

void to442_sobel(IplImage* origImage, IplImage* outImage) {
  int sobelX[3][3] = {{-1, 0, 1}, {-2, 0, 2}, {-1, 0, 1}};
  int sobelY[3][3] = {{1, 0, -1}, {2, 0, -2}, {1, 0, -1}};

  CvScalar pixel;
  
  int y;
  for (y = 1; y < origImage -> height - 1; y++) {
    int x;
    for (x = 1; x < origImage -> width - 1; x++) {
      int sumX = 0;
      int sumY = 0;

      int i;
      for (i = -1; i < 2; i++) {
	int j;
	for (j = -1; j < 2; j++) {
	  pixel = cvGet2D(origImage, y + i, x + j);
	  int val = pixel.val[0];
	  sumX = sumX + (val * sobelX[i + 1][j + 1]);
	  sumY = sumY + (val * sobelY[i + 1][j + 1]);
	}
      }

      int out = sumX + sumY;

      if (out > 255) {
	out = 255;
      }
      
      cvSet2D(outImage, y, x, cvScalar(out));
    }
  }
}


int main(int argc, char *argv[]) {
  if (argc != 2) {
    printf("Give video file name\n");
  }

  CvCapture *capture = cvCreateFileCaputre(argv[1]);
  if (capture == NULL) {
    perror("error in capture");
    exit(-1);
  }

  cvNamedWindow("Sobel Output", CV_WINDOW_AUTOSIZE);

  IplImage *frame;
  IplImage *gray;
  IplImage *sobel;

  while (frame = cvQueryFrame(capture)) {
    gray = cvCreateImage(cvGetSize(frame), IPL_DEPTH_8U, 1);
    sobel = cvCreateImage(cvGetSize(frame), IPL_DEPTH_8U, 1);

    to442_grayscale(frame, gray);

    to442_sobel(gray, sobel);

    cvShowImage("Sobel Filter", sobel);

    cvReleaseImage(&gray);
    cvReleaseImage(&sobel);

  }

  cvReleaseCapture(&capture);
  cvDestroyAllWindows();

  return 0;
}
